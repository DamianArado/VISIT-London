{"ast":null,"code":"import isPlainObject from 'lodash-es/isPlainObject';\nimport $$observable from 'symbol-observable';\n/**\r\n * These are private action types reserved by Redux.\r\n * For any unknown actions, you must return the current state.\r\n * If the current state is undefined, you must return the initial state.\r\n * Do not reference these action types directly in your code.\r\n */\n\nexport var ActionTypes = {\n  INIT: '@@redux/INIT'\n  /**\r\n   * Creates a Redux store that holds the state tree.\r\n   * The only way to change the data in the store is to call `dispatch()` on it.\r\n   *\r\n   * There should only be a single store in your app. To specify how different\r\n   * parts of the state tree respond to actions, you may combine several reducers\r\n   * into a single reducer function by using `combineReducers`.\r\n   *\r\n   * @param {Function} reducer A function that returns the next state tree, given\r\n   * the current state tree and the action to handle.\r\n   *\r\n   * @param {any} [preloadedState] The initial state. You may optionally specify it\r\n   * to hydrate the state from the server in universal apps, or to restore a\r\n   * previously serialized user session.\r\n   * If you use `combineReducers` to produce the root reducer function, this must be\r\n   * an object with the same shape as `combineReducers` keys.\r\n   *\r\n   * @param {Function} [enhancer] The store enhancer. You may optionally specify it\r\n   * to enhance the store with third-party capabilities such as middleware,\r\n   * time travel, persistence, etc. The only store enhancer that ships with Redux\r\n   * is `applyMiddleware()`.\r\n   *\r\n   * @returns {Store} A Redux store that lets you read the state, dispatch actions\r\n   * and subscribe to changes.\r\n   */\n\n};\nexport default function createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\r\n   * Reads the state tree managed by the store.\r\n   *\r\n   * @returns {any} The current state tree of your application.\r\n   */\n\n\n  function getState() {\n    return currentState;\n  }\n  /**\r\n   * Adds a change listener. It will be called any time an action is dispatched,\r\n   * and some part of the state tree may potentially have changed. You may then\r\n   * call `getState()` to read the current state tree inside the callback.\r\n   *\r\n   * You may call `dispatch()` from a change listener, with the following\r\n   * caveats:\r\n   *\r\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\r\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\r\n   * will not have any effect on the `dispatch()` that is currently in progress.\r\n   * However, the next `dispatch()` call, whether nested or not, will use a more\r\n   * recent snapshot of the subscription list.\r\n   *\r\n   * 2. The listener should not expect to see all state changes, as the state\r\n   * might have been updated multiple times during a nested `dispatch()` before\r\n   * the listener is called. It is, however, guaranteed that all subscribers\r\n   * registered before the `dispatch()` started will be called with the latest\r\n   * state by the time it exits.\r\n   *\r\n   * @param {Function} listener A callback to be invoked on every dispatch.\r\n   * @returns {Function} A function to remove this change listener.\r\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected listener to be a function.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n    };\n  }\n  /**\r\n   * Dispatches an action. It is the only way to trigger a state change.\r\n   *\r\n   * The `reducer` function, used to create the store, will be called with the\r\n   * current state tree and the given `action`. Its return value will\r\n   * be considered the **next** state of the tree, and the change listeners\r\n   * will be notified.\r\n   *\r\n   * The base implementation only supports plain object actions. If you want to\r\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\r\n   * wrap your store creating function into the corresponding middleware. For\r\n   * example, see the documentation for the `redux-thunk` package. Even the\r\n   * middleware will eventually dispatch plain object actions using this method.\r\n   *\r\n   * @param {Object} action A plain object representing “what changed”. It is\r\n   * a good idea to keep actions serializable so you can record and replay user\r\n   * sessions, or use the time travelling `redux-devtools`. An action must have\r\n   * a `type` property which may not be `undefined`. It is a good idea to use\r\n   * string constants for action types.\r\n   *\r\n   * @returns {Object} For convenience, the same action object you dispatched.\r\n   *\r\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\r\n   * return something else (for example, a Promise you can await).\r\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\r\n   * Replaces the reducer currently used by the store to calculate the state.\r\n   *\r\n   * You might need this if your app implements code splitting and you want to\r\n   * load some of the reducers dynamically. You might also need this if you\r\n   * implement a hot reloading mechanism for Redux.\r\n   *\r\n   * @param {Function} nextReducer The reducer for the store to use instead.\r\n   * @returns {void}\r\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer;\n    dispatch({\n      type: ActionTypes.INIT\n    });\n  }\n  /**\r\n   * Interoperability point for observable/reactive libraries.\r\n   * @returns {observable} A minimal observable of state changes.\r\n   * For more information, see the observable proposal:\r\n   * https://github.com/tc39/proposal-observable\r\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\r\n       * The minimal observable subscription method.\r\n       * @param {Object} observer Any object that can be used as an observer.\r\n       * The observer object should have a `next` method.\r\n       * @returns {subscription} An object with an `unsubscribe` method that can\r\n       * be used to unsubscribe the observable from the store, and prevent further\r\n       * emission of values from the observable.\r\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object') {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}","map":{"version":3,"sources":["C:/Users/khanh/Desktop/Full Stack WebD with React/Front-End Web Development with React/Visit London/Visit London/node_modules/redux/es/createStore.js"],"names":["isPlainObject","$$observable","ActionTypes","INIT","createStore","reducer","preloadedState","enhancer","_ref2","undefined","Error","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","getState","subscribe","listener","isSubscribed","push","unsubscribe","index","indexOf","splice","dispatch","action","type","listeners","i","length","replaceReducer","nextReducer","observable","_ref","outerSubscribe","observer","TypeError","observeState","next"],"mappings":"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","sourcesContent":["import isPlainObject from 'lodash-es/isPlainObject';\r\nimport $$observable from 'symbol-observable';\r\n\r\n/**\r\n * These are private action types reserved by Redux.\r\n * For any unknown actions, you must return the current state.\r\n * If the current state is undefined, you must return the initial state.\r\n * Do not reference these action types directly in your code.\r\n */\r\nexport var ActionTypes = {\r\n  INIT: '@@redux/INIT'\r\n\r\n  /**\r\n   * Creates a Redux store that holds the state tree.\r\n   * The only way to change the data in the store is to call `dispatch()` on it.\r\n   *\r\n   * There should only be a single store in your app. To specify how different\r\n   * parts of the state tree respond to actions, you may combine several reducers\r\n   * into a single reducer function by using `combineReducers`.\r\n   *\r\n   * @param {Function} reducer A function that returns the next state tree, given\r\n   * the current state tree and the action to handle.\r\n   *\r\n   * @param {any} [preloadedState] The initial state. You may optionally specify it\r\n   * to hydrate the state from the server in universal apps, or to restore a\r\n   * previously serialized user session.\r\n   * If you use `combineReducers` to produce the root reducer function, this must be\r\n   * an object with the same shape as `combineReducers` keys.\r\n   *\r\n   * @param {Function} [enhancer] The store enhancer. You may optionally specify it\r\n   * to enhance the store with third-party capabilities such as middleware,\r\n   * time travel, persistence, etc. The only store enhancer that ships with Redux\r\n   * is `applyMiddleware()`.\r\n   *\r\n   * @returns {Store} A Redux store that lets you read the state, dispatch actions\r\n   * and subscribe to changes.\r\n   */\r\n};export default function createStore(reducer, preloadedState, enhancer) {\r\n  var _ref2;\r\n\r\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\r\n    enhancer = preloadedState;\r\n    preloadedState = undefined;\r\n  }\r\n\r\n  if (typeof enhancer !== 'undefined') {\r\n    if (typeof enhancer !== 'function') {\r\n      throw new Error('Expected the enhancer to be a function.');\r\n    }\r\n\r\n    return enhancer(createStore)(reducer, preloadedState);\r\n  }\r\n\r\n  if (typeof reducer !== 'function') {\r\n    throw new Error('Expected the reducer to be a function.');\r\n  }\r\n\r\n  var currentReducer = reducer;\r\n  var currentState = preloadedState;\r\n  var currentListeners = [];\r\n  var nextListeners = currentListeners;\r\n  var isDispatching = false;\r\n\r\n  function ensureCanMutateNextListeners() {\r\n    if (nextListeners === currentListeners) {\r\n      nextListeners = currentListeners.slice();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reads the state tree managed by the store.\r\n   *\r\n   * @returns {any} The current state tree of your application.\r\n   */\r\n  function getState() {\r\n    return currentState;\r\n  }\r\n\r\n  /**\r\n   * Adds a change listener. It will be called any time an action is dispatched,\r\n   * and some part of the state tree may potentially have changed. You may then\r\n   * call `getState()` to read the current state tree inside the callback.\r\n   *\r\n   * You may call `dispatch()` from a change listener, with the following\r\n   * caveats:\r\n   *\r\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\r\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\r\n   * will not have any effect on the `dispatch()` that is currently in progress.\r\n   * However, the next `dispatch()` call, whether nested or not, will use a more\r\n   * recent snapshot of the subscription list.\r\n   *\r\n   * 2. The listener should not expect to see all state changes, as the state\r\n   * might have been updated multiple times during a nested `dispatch()` before\r\n   * the listener is called. It is, however, guaranteed that all subscribers\r\n   * registered before the `dispatch()` started will be called with the latest\r\n   * state by the time it exits.\r\n   *\r\n   * @param {Function} listener A callback to be invoked on every dispatch.\r\n   * @returns {Function} A function to remove this change listener.\r\n   */\r\n  function subscribe(listener) {\r\n    if (typeof listener !== 'function') {\r\n      throw new Error('Expected listener to be a function.');\r\n    }\r\n\r\n    var isSubscribed = true;\r\n\r\n    ensureCanMutateNextListeners();\r\n    nextListeners.push(listener);\r\n\r\n    return function unsubscribe() {\r\n      if (!isSubscribed) {\r\n        return;\r\n      }\r\n\r\n      isSubscribed = false;\r\n\r\n      ensureCanMutateNextListeners();\r\n      var index = nextListeners.indexOf(listener);\r\n      nextListeners.splice(index, 1);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Dispatches an action. It is the only way to trigger a state change.\r\n   *\r\n   * The `reducer` function, used to create the store, will be called with the\r\n   * current state tree and the given `action`. Its return value will\r\n   * be considered the **next** state of the tree, and the change listeners\r\n   * will be notified.\r\n   *\r\n   * The base implementation only supports plain object actions. If you want to\r\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\r\n   * wrap your store creating function into the corresponding middleware. For\r\n   * example, see the documentation for the `redux-thunk` package. Even the\r\n   * middleware will eventually dispatch plain object actions using this method.\r\n   *\r\n   * @param {Object} action A plain object representing “what changed”. It is\r\n   * a good idea to keep actions serializable so you can record and replay user\r\n   * sessions, or use the time travelling `redux-devtools`. An action must have\r\n   * a `type` property which may not be `undefined`. It is a good idea to use\r\n   * string constants for action types.\r\n   *\r\n   * @returns {Object} For convenience, the same action object you dispatched.\r\n   *\r\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\r\n   * return something else (for example, a Promise you can await).\r\n   */\r\n  function dispatch(action) {\r\n    if (!isPlainObject(action)) {\r\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\r\n    }\r\n\r\n    if (typeof action.type === 'undefined') {\r\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\r\n    }\r\n\r\n    if (isDispatching) {\r\n      throw new Error('Reducers may not dispatch actions.');\r\n    }\r\n\r\n    try {\r\n      isDispatching = true;\r\n      currentState = currentReducer(currentState, action);\r\n    } finally {\r\n      isDispatching = false;\r\n    }\r\n\r\n    var listeners = currentListeners = nextListeners;\r\n    for (var i = 0; i < listeners.length; i++) {\r\n      var listener = listeners[i];\r\n      listener();\r\n    }\r\n\r\n    return action;\r\n  }\r\n\r\n  /**\r\n   * Replaces the reducer currently used by the store to calculate the state.\r\n   *\r\n   * You might need this if your app implements code splitting and you want to\r\n   * load some of the reducers dynamically. You might also need this if you\r\n   * implement a hot reloading mechanism for Redux.\r\n   *\r\n   * @param {Function} nextReducer The reducer for the store to use instead.\r\n   * @returns {void}\r\n   */\r\n  function replaceReducer(nextReducer) {\r\n    if (typeof nextReducer !== 'function') {\r\n      throw new Error('Expected the nextReducer to be a function.');\r\n    }\r\n\r\n    currentReducer = nextReducer;\r\n    dispatch({ type: ActionTypes.INIT });\r\n  }\r\n\r\n  /**\r\n   * Interoperability point for observable/reactive libraries.\r\n   * @returns {observable} A minimal observable of state changes.\r\n   * For more information, see the observable proposal:\r\n   * https://github.com/tc39/proposal-observable\r\n   */\r\n  function observable() {\r\n    var _ref;\r\n\r\n    var outerSubscribe = subscribe;\r\n    return _ref = {\r\n      /**\r\n       * The minimal observable subscription method.\r\n       * @param {Object} observer Any object that can be used as an observer.\r\n       * The observer object should have a `next` method.\r\n       * @returns {subscription} An object with an `unsubscribe` method that can\r\n       * be used to unsubscribe the observable from the store, and prevent further\r\n       * emission of values from the observable.\r\n       */\r\n      subscribe: function subscribe(observer) {\r\n        if (typeof observer !== 'object') {\r\n          throw new TypeError('Expected the observer to be an object.');\r\n        }\r\n\r\n        function observeState() {\r\n          if (observer.next) {\r\n            observer.next(getState());\r\n          }\r\n        }\r\n\r\n        observeState();\r\n        var unsubscribe = outerSubscribe(observeState);\r\n        return { unsubscribe: unsubscribe };\r\n      }\r\n    }, _ref[$$observable] = function () {\r\n      return this;\r\n    }, _ref;\r\n  }\r\n\r\n  // When a store is created, an \"INIT\" action is dispatched so that every\r\n  // reducer returns their initial state. This effectively populates\r\n  // the initial state tree.\r\n  dispatch({ type: ActionTypes.INIT });\r\n\r\n  return _ref2 = {\r\n    dispatch: dispatch,\r\n    subscribe: subscribe,\r\n    getState: getState,\r\n    replaceReducer: replaceReducer\r\n  }, _ref2[$$observable] = observable, _ref2;\r\n}"]},"metadata":{},"sourceType":"module"}